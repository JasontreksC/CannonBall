[gd_resource type="VisualShader" load_steps=11 format=3 uid="uid://chslhsr7t500r"]

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_ocjxx"]
default_input_values = [0, 0.0, 1, 0.5, 2, 0.0, 3, Vector3(1, 1, 1), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_hdge2"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0.2, 0.2)]
op_type = 0
operator = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_hdge2"]
parameter_name = "Brightness"
hint = 1
max = 100.0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_eam13"]
operator = 2

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_ocjxx"]
parameter_name = "Texture2DParameter"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_ocjxx"]
parameter_name = "ColorParameter"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ocjxx"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_0ji2a"]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_6pc7o"]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_svpbd"]
expanded_output_ports = [0]
source = 5

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Texture2DParameter;
uniform vec4 ColorParameter : source_color;
uniform float Brightness : hint_range(0.0, 100.0);



void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// VectorOp:11
	vec2 n_in11p1 = vec2(0.20000, 0.20000);
	vec2 n_out11p0 = n_out6p0 * n_in11p1;


	vec4 n_out5p0;
// Texture2D:5
	n_out5p0 = texture(Texture2DParameter, n_out11p0);


// ColorParameter:3
	vec4 n_out3p0 = ColorParameter;


// FloatParameter:12
	float n_out12p0 = Brightness;


// VectorOp:13
	vec3 n_out13p0 = vec3(n_out3p0.xyz) * vec3(n_out12p0);


	vec4 n_out8p0;
// Texture2D:8
	n_out8p0 = texture(TEXTURE, n_out6p0);


	vec3 n_out10p0;
// If:10
	float n_in10p1 = 0.50000;
	float n_in10p2 = 0.00000;
	vec3 n_in10p3 = vec3(1.00000, 1.00000, 1.00000);
	if(abs(n_out5p0.x - n_in10p1) < n_in10p2)
	{
		n_out10p0 = n_in10p3;
	}
	else if(n_out5p0.x < n_in10p1)
	{
		n_out10p0 = vec3(n_out8p0.xyz);
	}
	else
	{
		n_out10p0 = n_out13p0;
	}


// Output:0
	COLOR.rgb = n_out10p0;


}
"
graph_offset = Vector2(-352.412, -14.3373)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1140, 80)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture2DParameter_ocjxx")
nodes/fragment/2/position = Vector2(-520, 40)
nodes/fragment/3/node = SubResource("VisualShaderNodeColorParameter_ocjxx")
nodes/fragment/3/position = Vector2(-480, 540)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture_ocjxx")
nodes/fragment/5/position = Vector2(-120, 40)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_0ji2a")
nodes/fragment/6/position = Vector2(-1080, -340)
nodes/fragment/7/node = SubResource("VisualShaderNodeInput_6pc7o")
nodes/fragment/7/position = Vector2(-480, -500)
nodes/fragment/8/node = SubResource("VisualShaderNodeTexture_svpbd")
nodes/fragment/8/position = Vector2(-60, -540)
nodes/fragment/10/node = SubResource("VisualShaderNodeIf_ocjxx")
nodes/fragment/10/position = Vector2(400, 80)
nodes/fragment/11/node = SubResource("VisualShaderNodeVectorOp_hdge2")
nodes/fragment/11/position = Vector2(-460, -260)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatParameter_hdge2")
nodes/fragment/12/position = Vector2(-480, 860)
nodes/fragment/13/node = SubResource("VisualShaderNodeVectorOp_eam13")
nodes/fragment/13/position = Vector2(100, 600)
nodes/fragment/connections = PackedInt32Array(2, 0, 5, 2, 7, 0, 8, 2, 6, 0, 8, 0, 5, 0, 10, 0, 8, 0, 10, 5, 6, 0, 11, 0, 11, 0, 5, 0, 12, 0, 13, 1, 3, 0, 13, 0, 13, 0, 10, 4, 10, 0, 0, 0)
